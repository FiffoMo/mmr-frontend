// stores/useAuthStore.js - VERSION CORRIG√âE ET NETTOY√âE
import { defineStore } from 'pinia';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
    token: null,
    loading: false,
    error: null
  }),
  
  getters: {
    isAuthenticated: (state) => !!state.token && !!state.user,
    userType: (state) => state.user?.type || 0,
    isClient: (state) => state.user?.type >= 1,
    isAdClient: (state) => state.user?.type === 2,
    clientId: (state) => state.user?.id || null
  },
  
  actions: {
    // Initialiser l'√©tat d'authentification depuis le localStorage
    initAuth() {
      // V√©rifier si le code s'ex√©cute dans un navigateur
      if (typeof window !== 'undefined') {
        const token = localStorage.getItem('auth_token');
        const userData = localStorage.getItem('auth_user');
        
        if (token && userData) {
          try {
            const parsedUser = JSON.parse(userData);
            
            // V√©rifier la validit√© des donn√©es
            if (parsedUser && parsedUser.id && parsedUser.email) {
              this.token = token;
              this.user = parsedUser;
              console.log('Auth initialis√©e pour l\'utilisateur:', parsedUser.email);
              
              // V√©rifier la validit√© du token en arri√®re-plan
              // this.validateTokenAsync();
            } else {
              console.log('Donn√©es utilisateur invalides, nettoyage...');
              this.clearAuth();
            }
          } catch (error) {
            console.error('Erreur lors du parsing des donn√©es utilisateur:', error);
            this.clearAuth();
          }
        } else {
          console.log('Aucun token ou donn√©es utilisateur trouv√©s');
          this.clearAuth();
        }
      }
    },
    
    // Valider le token de mani√®re asynchrone
    async validateTokenAsync() {
      if (!this.token) return;
      
      try {
        const response = await fetch('/api/directus/users/me', {
          headers: {
            'Authorization': `Bearer ${this.token}`
          },
          credentials: 'include'
        });
        
        if (!response.ok) {
          console.log('Token invalide, d√©connexion...');
          this.clearAuth();
          return;
        }
        
        const userData = await response.json();
        
        // V√©rifier si l'utilisateur retourn√© correspond √† celui stock√©
        if (userData.data && userData.data.id !== this.user?.id) {
          console.log('Utilisateur diff√©rent d√©tect√©, mise √† jour...');
          this.user = userData.data;
          this.syncUserData();
        }
        
      } catch (error) {
        console.error('Erreur lors de la validation du token:', error);
        this.clearAuth();
      }
    },
    
    // D√©finir l'√©tat d'authentification avec nettoyage pr√©alable
    setAuth(token, user) {
      // IMPORTANT: Nettoyer d'abord les anciennes donn√©es
      this.clearAuth();
      
      // Puis d√©finir les nouvelles donn√©es
      this.token = token;
      this.user = user;
      
      if (typeof window !== 'undefined') {
        localStorage.setItem('auth_token', token);
        localStorage.setItem('auth_user', JSON.stringify(user));
      }
      
      console.log('Authentification d√©finie pour:', user?.email, 'ID:', user?.id);
    },
    
    // Mettre √† jour les donn√©es utilisateur
    setUser(userData) {
      if (!userData) return;
      
      // Fusionner les nouvelles donn√©es avec les donn√©es existantes
      this.user = { ...this.user, ...userData };
      
      // Persister les modifications dans le localStorage
      this.syncUserData();
      
      console.log('Donn√©es utilisateur mises √† jour dans le store:', this.user);
    },
    
    // Synchroniser les donn√©es utilisateur avec le localStorage
    syncUserData() {
      if (typeof window !== 'undefined' && this.user) {
        localStorage.setItem('auth_user', JSON.stringify(this.user));
      }
    },
    
    // Effacer l'√©tat d'authentification de mani√®re compl√®te
    clearAuth() {
      this.token = null;
      this.user = null;
      this.error = null;
      
      if (typeof window !== 'undefined') {
        // Nettoyer le localStorage
        localStorage.removeItem('auth_token');
        localStorage.removeItem('auth_user');
        
        // Nettoyer aussi d'autres cl√©s potentielles
        ['directus_token', 'directus_user', 'user_session'].forEach(key => {
          localStorage.removeItem(key);
        });
        
        // Nettoyer les cookies li√©s √† Directus
        document.cookie.split(";").forEach((cookie) => {
          const eqPos = cookie.indexOf("=");
          const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
          if (name.includes('directus') || name.includes('auth')) {
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; domain=localhost;`;
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
          }
        });
      }
      
      console.log('Authentification compl√®tement nettoy√©e');
    },

    // M√©thode de d√©connexion forc√©e pour debug
    forceLogout() {
      console.log('üî• FORCE LOGOUT - Nettoyage complet');
      
      // Nettoyer l'√©tat du store
      this.token = null;
      this.user = null;
      this.error = null;
      this.loading = false;
      
      // Nettoyer le localStorage
      if (typeof window !== 'undefined') {
        localStorage.clear();
        sessionStorage.clear();
        
        // Nettoyer tous les cookies
        document.cookie.split(";").forEach(cookie => {
          const eqPos = cookie.indexOf("=");
          const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
          document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        });
      }
      
      console.log('‚úÖ Force logout termin√©');
    },
    
    // Se connecter avec nettoyage pr√©alable
    async login(email, password) {
      this.loading = true;
      this.error = null;
      
      try {
        if (!email || !password) {
          throw new Error('Email et mot de passe requis');
        }
        
        // Nettoyer toute authentification pr√©c√©dente avant la nouvelle connexion
        this.clearAuth();
        
        console.log('Tentative de connexion pour:', email);
        
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({
            email: email.trim(),
            password: password
          })
        });
        
        console.log('R√©ponse login brute:', response.status, response.statusText);
        
        if (!response.ok) {
          const errorData = await response.json();
          console.log('Erreur login:', errorData);
          throw new Error(errorData.message || 'Identifiants incorrects');
        }
        
        const data = await response.json();
        console.log('Data login re√ßue:', data);
        
        if (!data.data || !data.data.access_token) {
          throw new Error('Token d\'acc√®s manquant dans la r√©ponse');
        }
        
        console.log('Token re√ßu, r√©cup√©ration des donn√©es utilisateur...');
        
        // R√©cup√©rer les informations utilisateur avec le nouveau token
        const userResponse = await fetch('/api/auth/me', {
          headers: {
            'Authorization': `Bearer ${data.data.access_token}`
          },
          credentials: 'include'
        });
        
        console.log('R√©ponse user data brute:', userResponse.status, userResponse.statusText);
        
        if (!userResponse.ok) {
          const errorData = await userResponse.json();
          console.log('Erreur user data:', errorData);
          throw new Error(errorData.message || 'Erreur lors de la r√©cup√©ration des donn√©es utilisateur');
        }
        
        const userData = await userResponse.json();
        console.log('User data re√ßue:', userData);
        
        if (!userData.data || !userData.data.id) {
          throw new Error('Donn√©es utilisateur invalides');
        }
        
        console.log('Connexion r√©ussie pour utilisateur:', userData.data.email, 'ID:', userData.data.id);
        
        // D√©finir l'√©tat d'authentification avec les nouvelles donn√©es
        this.setAuth(data.data.access_token, userData.data);
        
        return userData.data;
      } catch (error) {
        console.error('Erreur de connexion:', error);
        this.error = error.message;
        this.clearAuth(); // Nettoyer en cas d'erreur
        throw error;
      } finally {
        this.loading = false;
      }
    },
    
    // Inscription d'un nouvel utilisateur
    async register(firstName, lastName, email, password) {
      this.loading = true;
      this.error = null;
      
      try {
        // Nettoyer toute authentification pr√©c√©dente
        this.clearAuth();
        
        // D√©terminer l'ID du r√¥le "Utilisateur"
        const roleId = '27b07ae3-cc05-402a-947e-23d847b0f329';
        
        console.log('Cr√©ation du compte pour:', email);
        
        // Cr√©er un nouvel utilisateur via l'API Directus
        const response = await fetch('/api/directus/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({
            first_name: firstName,
            last_name: lastName,
            email: email.trim(),
            password: password,
            role: roleId,
            status: 'active' // S'assurer que le compte est actif
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.errors?.[0]?.message || 'Erreur lors de la cr√©ation du compte');
        }
        
        const newUser = await response.json();
        console.log('Compte cr√©√©, connexion automatique...');
        
        // Se connecter automatiquement apr√®s l'inscription
        return await this.login(email, password);
      } catch (error) {
        console.error('Erreur lors de l\'inscription:', error);
        this.error = error.message;
        this.clearAuth();
        throw error;
      } finally {
        this.loading = false;
      }
    },
    
    // Se d√©connecter
    async logout() {
      this.loading = true;
      
      try {
        console.log('D√©connexion en cours...');
        
        if (this.token) {
          // Appel √† l'API pour la d√©connexion
          await fetch('/api/directus/auth/logout', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${this.token}`
            },
            credentials: 'include'
          });
        }
      } catch (error) {
        console.error('Erreur lors de la d√©connexion API:', error);
      } finally {
        // Effacer toutes les donn√©es d'authentification
        this.clearAuth();
        
        this.loading = false;
        
        // Rediriger vers la page d'accueil
        if (typeof window !== 'undefined') {
          console.log('Redirection vers la page d\'accueil');
          await navigateTo('/');
        }
      }
    },
    
    // Demander une r√©initialisation de mot de passe
    async requestPasswordReset(email, resetUrl) {
      this.loading = true;
      this.error = null;
      
      try {
        console.log('üîÑ Demande de r√©initialisation de mot de passe pour:', email);
        
        // CORRECTION: Utiliser notre API personnalis√©e qui fonctionne
        const response = await fetch('/api/auth/password-reset', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email: email.trim()
            // Note: resetUrl n'est pas n√©cessaire car il est construit c√¥t√© serveur
          })
        });
        
        console.log('Statut r√©ponse reset password:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json();
          console.error('Erreur reset password:', errorData);
          throw new Error(errorData.statusMessage || 'Erreur lors de la demande de r√©initialisation');
        }
        
        const result = await response.json();
        console.log('‚úÖ Demande de r√©initialisation envoy√©e avec succ√®s');
        
        return result;
      } catch (error) {
        console.error('Erreur dans requestPasswordReset:', error);
        this.error = error.message;
        throw error;
      } finally {
        this.loading = false;
      }
    },
    
    // R√©initialiser le mot de passe
    async resetPassword(token, password) {
      this.loading = true;
      this.error = null;
      
      try {
        const response = await fetch('/api/directus/auth/password/reset', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            token,
            password
          })
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.errors?.[0]?.message || 'Erreur lors de la r√©initialisation du mot de passe');
        }
        
        return true;
      } catch (error) {
        this.error = error.message;
        throw error;
      } finally {
        this.loading = false;
      }
    },
    
    // V√©rifier si l'utilisateur est connect√© (m√©thode am√©lior√©e)
    checkAuth() {
      if (typeof window !== 'undefined') {
        const userStr = localStorage.getItem('auth_user');
        const token = localStorage.getItem('auth_token');
        
        if (userStr && token) {
          try {
            const parsedUser = JSON.parse(userStr);
            
            // V√©rifications de validit√©
            if (parsedUser && parsedUser.id && parsedUser.email && token.length > 10) {
              this.user = parsedUser;
              this.token = token;
              
              console.log('Auth v√©rifi√©e pour:', parsedUser.email);
              return true;
            } else {
              console.log('Donn√©es d\'authentification invalides');
              this.clearAuth();
              return false;
            }
          } catch (e) {
            console.error("Erreur lors de la v√©rification des donn√©es utilisateur:", e);
            this.clearAuth();
            return false;
          }
        } else {
          console.log('Aucune donn√©e d\'authentification trouv√©e');
          this.clearAuth();
          return false;
        }
      }
      
      return false;
    },
    
    // Nouvelle m√©thode pour v√©rifier la validit√© du token
    async checkToken() {
      if (!this.token) {
        this.clearAuth();
        return false;
      }
      
      try {
        const response = await fetch('/api/directus/users/me', {
          headers: {
            'Authorization': `Bearer ${this.token}`
          },
          credentials: 'include'
        });
        
        if (!response.ok) {
          console.log('Token expir√© ou invalide');
          this.clearAuth();
          return false;
        }
        
        const userData = await response.json();
        
        if (userData.data) {
          // CORRECTION: Au lieu de comparer les IDs, mettre √† jour les donn√©es
          // Si l'utilisateur est diff√©rent, c'est peut-√™tre apr√®s un reset
          if (!this.user || userData.data.id !== this.user.id) {
            console.log('Mise √† jour des donn√©es utilisateur apr√®s validation token');
            this.setUser(userData.data);
          } else {
            // Juste mettre √† jour les donn√©es sans changer l'ID
            this.setUser(userData.data);
          }
          return true;
        } else {
          console.warn('Aucune donn√©e utilisateur retourn√©e');
          this.clearAuth();
          return false;
        }
        
      } catch (error) {
        console.error('Erreur lors de la v√©rification du token:', error);
        this.clearAuth();
        return false;
      }
    }
  }
});