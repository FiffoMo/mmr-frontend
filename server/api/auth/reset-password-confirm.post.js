// server/api/auth/reset-password-confirm.post.js - VERSION CORRIG√âE AVEC DEBUG

export default defineEventHandler(async (event) => {
  try {
    const { token, email, password } = await readBody(event);
    
    console.log('üîç RESET PASSWORD DEBUG - D√©but du processus');
    console.log('Email:', email);
    console.log('Token:', token ? token.substring(0, 10) + '...' : 'MANQUANT');
    console.log('Password fourni:', password ? 'OUI' : 'NON');
    
    // Validation des donn√©es
    if (!token || !email || !password) {
      console.error('‚ùå Donn√©es manquantes:', { hasToken: !!token, hasEmail: !!email, hasPassword: !!password });
      throw createError({
        statusCode: 400,
        statusMessage: 'Donn√©es manquantes'
      });
    }

    // Validation du mot de passe
    if (password.length < 8) {
      console.error('‚ùå Mot de passe trop court');
      throw createError({
        statusCode: 400,
        statusMessage: 'Le mot de passe doit contenir au moins 8 caract√®res'
      });
    }

    // Validation des crit√®res de mot de passe
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);

    if (!hasUppercase || !hasLowercase || !hasNumber) {
      console.error('‚ùå Crit√®res mot de passe non respect√©s');
      throw createError({
        statusCode: 400,
        statusMessage: 'Le mot de passe doit contenir au moins une majuscule, une minuscule et un chiffre'
      });
    }

    console.log('‚úÖ Validation des donn√©es OK');

    const runtimeConfig = useRuntimeConfig();
    const directusUrl = runtimeConfig.directusUrl || 'http://localhost:8055';
    const directusToken = runtimeConfig.directusApiToken;

    console.log('üîß Configuration Directus:', { url: directusUrl, hasToken: !!directusToken });

    // √âTAPE 1: Rechercher l'utilisateur par EMAIL d'abord
    console.log('üîç √âTAPE 1: Recherche utilisateur par email...');
    const userSearchUrl = `${directusUrl}/users?filter[email][_eq]=${encodeURIComponent(email)}`;
    console.log('URL recherche utilisateur:', userSearchUrl);

    const userResponse = await fetch(userSearchUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${directusToken}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('Statut recherche utilisateur:', userResponse.status);

    if (!userResponse.ok) {
      const errorText = await userResponse.text();
      console.error('‚ùå Erreur lors de la recherche utilisateur:', userResponse.status, errorText);
      throw createError({
        statusCode: 500,
        statusMessage: 'Erreur serveur lors de la recherche utilisateur'
      });
    }

    const userData = await userResponse.json();
    console.log('R√©sultats recherche utilisateur:', {
      count: userData.data?.length || 0,
      users: userData.data?.map(u => ({ id: u.id, email: u.email, hasResetToken: !!u.password_reset_token }))
    });
    
    if (!userData.data || userData.data.length === 0) {
      console.error('‚ùå Aucun utilisateur trouv√© pour cet email');
      throw createError({
        statusCode: 400,
        statusMessage: 'Email non trouv√©'
      });
    }

    const user = userData.data[0];
    console.log('üë§ Utilisateur trouv√©:', {
      id: user.id,
      email: user.email,
      hasResetToken: !!user.password_reset_token,
      resetTokenMatch: user.password_reset_token === token,
      tokenExpiry: user.password_reset_expires
    });

    // √âTAPE 2: V√©rifier que le token correspond
    if (!user.password_reset_token || user.password_reset_token !== token) {
      console.error('‚ùå Token de r√©initialisation incorrect ou manquant');
      console.log('Token en base:', user.password_reset_token ? user.password_reset_token.substring(0, 10) + '...' : 'AUCUN');
      console.log('Token fourni:', token.substring(0, 10) + '...');
      throw createError({
        statusCode: 400,
        statusMessage: 'Token invalide'
      });
    }

    console.log('‚úÖ Token de r√©initialisation valide');
    
    // √âTAPE 3: V√©rifier l'expiration du token
    if (user.password_reset_expires) {
      const expiryDate = new Date(user.password_reset_expires);
      const now = new Date();
      
      console.log('üïê V√©rification expiration:', {
        expiry: expiryDate.toISOString(),
        now: now.toISOString(),
        expired: now > expiryDate
      });
      
      if (now > expiryDate) {
        console.error('‚ùå Token expir√©');
        
        // Nettoyer le token expir√©
        await fetch(`${directusUrl}/users/${user.id}`, {
          method: 'PATCH',
          headers: {
            'Authorization': `Bearer ${directusToken}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            password_reset_token: null,
            password_reset_expires: null
          })
        });
        
        throw createError({
          statusCode: 400,
          statusMessage: 'Token expir√©'
        });
      }
    }

    console.log('‚úÖ Token non expir√©');

    // √âTAPE 4: Mettre √† jour le mot de passe
    console.log('üîÑ √âTAPE 4: Mise √† jour du mot de passe...');
    
    const updateData = {
      password: password,
      password_reset_token: null,
      password_reset_expires: null
    };

    console.log('Donn√©es de mise √† jour:', {
      hasPassword: !!updateData.password,
      resetTokenCleared: updateData.password_reset_token === null,
      expiryCleared: updateData.password_reset_expires === null
    });

    const updateUrl = `${directusUrl}/users/${user.id}`;
    console.log('URL mise √† jour:', updateUrl);

    const updateResponse = await fetch(updateUrl, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${directusToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(updateData)
    });

    console.log('Statut mise √† jour:', updateResponse.status);

    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      console.error('‚ùå Erreur lors de la mise √† jour du mot de passe:', updateResponse.status, errorText);
      
      // Essayer de parser l'erreur JSON
      try {
        const errorJson = JSON.parse(errorText);
        console.error('D√©tails erreur JSON:', errorJson);
      } catch (e) {
        console.error('Erreur non-JSON:', errorText);
      }
      
      throw createError({
        statusCode: 500,
        statusMessage: 'Erreur lors de la mise √† jour du mot de passe'
      });
    }

    const updateResult = await updateResponse.json();
    console.log('‚úÖ Mise √† jour r√©ussie:', {
      userId: updateResult.data?.id,
      email: updateResult.data?.email,
      hasPassword: !!updateResult.data,
      resetTokenRemoved: !updateResult.data?.password_reset_token
    });

    // √âTAPE 5: Test de connexion pour validation
    console.log('üß™ √âTAPE 5: Test de connexion avec nouveau mot de passe...');
    
    const loginTestResponse = await fetch(`${directusUrl}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: email,
        password: password
      })
    });

    console.log('Statut test connexion:', loginTestResponse.status);

    if (loginTestResponse.ok) {
      const loginData = await loginTestResponse.json();
      console.log('‚úÖ Test de connexion r√©ussi - mot de passe bien enregistr√©');
    } else {
      const loginError = await loginTestResponse.text();
      console.error('‚ùå Test de connexion √©chou√©:', loginTestResponse.status, loginError);
      
      // Pas fatal, mais indique un probl√®me
      console.warn('‚ö†Ô∏è  Le mot de passe a √©t√© mis √† jour mais le test de connexion a √©chou√©');
    }

    console.log('üéâ RESET PASSWORD - PROCESSUS TERMIN√â AVEC SUCC√àS');

    return {
      success: true,
      message: 'Votre mot de passe a √©t√© modifi√© avec succ√®s',
      debug: {
        userId: user.id,
        email: user.email,
        passwordUpdated: true,
        tokenCleared: true
      }
    };

  } catch (error) {
    console.error('üí• ERREUR GLOBALE dans reset-password-confirm:', error);
    
    if (error.statusCode) {
      throw error;
    }
    
    throw createError({
      statusCode: 500,
      statusMessage: 'Une erreur est survenue lors de la modification du mot de passe'
    });
  }
});